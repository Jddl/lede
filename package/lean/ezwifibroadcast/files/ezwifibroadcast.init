#!/bin/sh /etc/rc.common

START=99
STOP=15
USE_PROCD=1

EXTRA_COMMANDS="measure"
EXTRA_HELP=<<EOF
	measure	Test tx_measure with current settings.
EOF

STTY_ARGS="-icrnl -ocrnl -imaxbel -opost -isig -icanon -echo -echoe -ixoff -ixon"

function measure {
	init_nic
	TEST_RESULT=$(/usr/sbin/tx_measure \
	-p $(uci get wbc.video.port) \
	-b $(uci get wbc.video.datanum) \
	-r $(uci get wbc.video.fecnum) \
	-f $(uci get wbc.video.packetsize) \
	-t $(uci get wbc.video.frametype) \
	-d $(uci get wbc.video.bitrate) \
	-y 0 $(uci get wbc.nic.iface) )
	echo $TEST_RESULT
}

function init_nic {
	NIC=$(uci get wbc.nic.iface)
	FREQ=$(uci get wbc.nic.freq)
	CHANBW=$(uci get wbc.nic.chanbw)
	PHY_NAME=$(iwinfo $NIC info|grep "PHY name"|cut -d ':' -f 3)
	iw reg set CN					|| { echo "Init_NIC: Set Reg to CN failed!" && sleep 864000}
	ifconfig $NIC mtu 2304 			|| { echo "Init_NIC: Set $NIC MTU failed!" && sleep 864000}
	ifconfig $NIC down 				|| { echo "Init_NIC: Bringing down interface $NIC failed!" && sleep 864000}
	iw dev $NIC set monitor none	|| { echo "Init_NIC: Set $NIC Monitor mode failed!" && sleep 864000}
	ifconfig $NIC up 				|| { echo "Init_NIC: Bringing up interface $NIC failed!" && sleep 864000}
	iw dev $NIC set freq $FREQ		|| { echo "Init_NIC: Set freq $FREQ MHz on $NIC failed!" && sleep 864000}
	CHANBW_PATH=$(find /sys/kernel/debug/ieee80211 -name chanbw |grep $PHY_NAME)
	if [ -f $(CHANBW_PATH) ]; then
		echo "Init_NIC: $NIC maybe supports 5MHz/10MHz bandwidth."
		echo $(CHANBW) > $(CHANBW_PATH) 
	else
		echo "Init_NIC: $NIC on 5MHz/10MHz bandwidth is not supported. Use default instead."
	fi
}


start_service() {

	[ $(uci get wbc.wbc.enable) -eq 0 ] && exit
	
	# 0. Init Wi-Fi card here
	echo "Init Wi-Fi Card..."
	init_nic
	echo $(measure) > /tmp/bitrate_measured_kbit
	# To-do: Find out what these things mean and how to bypass
	echo 5000 > /tmp/bitrate_kbit
	echo "0" > /tmp/cts
	echo "0" > /tmp/undervolt 	# a wireless router should never...
	
	if [ "$(uci get wbc.wbc.mode)" = "tx" ]; then
		echo "EZWifiBroadcast: TX mode enabled (Air)."
		/usr/sbin/sharedmem_init_tx
		
		# 1. TX_RAWSOCK Instance
		# Listen UDP on listen_port -> air
		if [ $(uci get wbc.video.enable) -eq 1 ]; then
			procd_open_instance "wbc_tx_rawsock"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command nc -ulp $(uci get wbc.video.listen_port)|\
				/usr/sbin/tx_rawsock \
				-p $(uci get wbc.video.wbc_port) \
				-b $(uci get wbc.video.datanum) \
				-r $(uci get wbc.video.fecnum) \
				-f $(uci get wbc.video.blocksize) \
				-t $(uci get wbc.video.frametype) \
				-d $(uci get wbc.video.bitrate) \
				-y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_rawsock.pid	
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting tx_rawsock..."
		else
			echo "EZWifiBroadcast: Video TX Disabled."
		fi
		
		# 2. RSSI TX Instance
		if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
			procd_open_instance "wbc_rssitx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rssitx
			procd_append_param command $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rssitx.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting rssitx..."
		else
			echo "EZWifiBroadcast: RSSI TX Disabled."
		fi
		
		# 3. OSD TX Instance (Telemetry)
		# wbc.telemetry.uart -> air
		if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
			echo "EZWifiBroadcast: Telemetry enabled on $(uci get wbc.telemetry.uart)."
			stty -F $(uci get wbc.telemetry.uart) $(STTY_ARGS) $(uci get wbc.telemetry.baud)  
			procd_open_instance "wbc_tx_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/tx_telemetry \
				-p $(uci get wbc.telemetry.port) \
				-c $(uci get wbc.telemetry.cts) \
				-r $(uci get wbc.telemetry.retrans) \
				-x $(uci get wbc.telemetry.proto) \
				-d $(uci get wbc.telemetry.bitrate) \
				-y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_telemetry.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting Telemetry..."
		else
			echo "EZWifiBroadcast: Telemetry disabled."
		fi

		# 4. Uplink RX Instance
		# air -> wbc.uplink.uart 
		if [ $(uci get wbc.uplink.uplink_enable) -eq 1 ]; then
			echo "EZWifiBroadcast: Uplink enabled on $(uci get wbc.uplink.uart)."
			procd_open_instance "wbc_rx_rc_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rx_rc_telemetry \
				-p $(uci get wbc.uplink.port) \
				-r 99 \
				-b $(uci get wbc.uplink.baud) \
				-o 0 \
				-s $(uci get wbc.uplink.uart) \
				$(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rx_rc_telemetry.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting Uplink RX..."
		else
			echo "EZWifiBroadcast: Uplink disabled."
		fi
	
	else # RX	
		echo "EZWifiBroadcast: RX mode enabled (Ground)."
		/root/wifibroadcast/sharedmem_init_rx
		
		# 1. RX Instance
		# Video stream received from air -> send_ip:send_port (UDP)
		if [ $(uci get wbc.video.enable) -eq 1 ]; then
			procd_open_instance "wbc_rx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command  /usr/sbin/rx \
				-p $(uci get wbc.video.wbc_port) \
				-b $(uci get wbc.video.datanum) \
				-r $(uci get wbc.video.fecnum) \
				-f $(uci get wbc.video.blocksize) \
				-t $(uci get wbc.video.frametype) \
				-d $(uci get wbc.video.rxbuf) \
				   $(uci get wbc.nic.iface) |\
				nc -u $(wbc.video.send_ip) $(wbc.video.send_port) 
			procd_set_param pidfile /var/run/wbc/rx.pid	
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting rx..."
		else
			echo "EZWifiBroadcast: Video RX Disabled."
		fi
		
		# 2. OSD RX Instance (Telemetry)
		# Maybe have bugs
		# RX Telemetry received from air -> send_ip:send_port (UDP)
		if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
			echo "EZWifiBroadcast: Telemetry enabled, redirect to $(wbc.telemetry.send_ip):$(wbc.telemetry.send_port)."
			stty -F $(uci get wbc.telemetry.uart) $(STTY_ARGS) $(uci get wbc.telemetry.baud)  
			procd_open_instance "wbc_rx_rc_telemetry_buf"
			procd_set_param stdout 1
			procd_set_param stderr 1
			# rx_rc_telemetry_buf does not support rc
			# so using /dev/null now
			procd_set_param command /usr/sbin/rx_rc_telemetry_buf \
				-p $(uci get wbc.telemetry.port) \
				-b 19200 -s /dev/null -o 1 -r 0\
				 $(uci get wbc.nic.iface) |\
				 nc -u $(wbc.telemetry.send_ip) $(wbc.telemetry.send_port) 
			procd_set_param pidfile /var/run/wbc/rx_rc_telemetry_buf.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting Telemetry..."
		else
			echo "EZWifiBroadcast: Telemetry disabled."
		fi
		
		# 3. Uplink TX Instance
		# Listen on UDP port -> air
		if [ $(uci get wbc.uplink.enable) -eq 1 ]; then
			echo "EZWifiBroadcast: Uplink TX enabled on $(uci get wbc.uplink.uart)."
			procd_open_instance "wbc_uplink_tx_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command nc -ulp $(uci get wbc.uplink.listen_port)|\
				/usr/sbin/tx_telemetry \
				-p $(uci get wbc.uplink.port) \
				-c $(uci get wbc.uplink.cts) \
				-r $(uci get wbc.uplink.retrans) \
				-x $(uci get wbc.uplink.proto) \
				-d $(uci get wbc.uplink.bitrate) \
				-y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_telemetry_uplink.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting Uplink..."
		else
			echo "EZWifiBroadcast: Uplink disabled."
		fi
		
		# 4. RSSI RX Instance
		if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
			procd_open_instance "wbc_rssirx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rssirx
			procd_append_param command $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rssirx.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZWifiBroadcast: Starting rssirx..."
		else
			echo "EZWifiBroadcast: RSSI RX Disabled."
		fi
	fi
	
}

reload_service() {
	restart
}

service_triggers()
{
	procd_add_reload_trigger "wbc"
}
