#!/bin/sh /etc/rc.common

START=99
STOP=15

USE_PROCD=1

EXTRA_COMMANDS="measure"
EXTRA_HELP=<<EOF
	measure	Test tx_measure with current settings.
EOF

STTY_ARGS="-icrnl -ocrnl -imaxbel -opost -isig -icanon -echo -echoe -ixoff -ixon"

measure() {
	init_nic >/dev/null 
	TEST_RESULT=$(/usr/sbin/tx_measure \
	-p $(uci get wbc.video.port) \
	-b $(uci get wbc.video.datanum) \
	-r $(uci get wbc.video.fecnum) \
	-f $(uci get wbc.video.packetsize) \
	-t $(uci get wbc.video.frametype) \
	-d $(uci get wbc.video.bitrate) \
	-y 0 $(uci get wbc.nic.iface) )
	echo $TEST_RESULT
}

init_nic() {
	NIC=$(uci get wbc.nic.iface)
	FREQ=$(uci get wbc.nic.freq)
	CHANBW=$(uci get wbc.nic.chanbw)
	PHY_NAME=$(iwinfo $NIC info|grep "PHY name"|cut -d ':' -f 3)
	iw reg set CN					# || { echo "EZ-WifiBroadcast: Init_NIC: Set Reg to CN failed!" && sleep 864000}
	ifconfig $NIC mtu 2304 			# || { echo "EZ-WifiBroadcast: Init_NIC: Set $NIC MTU failed!" && sleep 864000}
	ifconfig $NIC down 				# || { echo "EZ-WifiBroadcast: Init_NIC: Bringing down interface $NIC failed!" && sleep 864000}
	iw dev $NIC set monitor none	# || { echo "EZ-WifiBroadcast: Init_NIC: Set $NIC Monitor mode failed!" && sleep 864000}
	ifconfig $NIC up 				# || { echo "EZ-WifiBroadcast: Init_NIC: Bringing up interface $NIC failed!" && sleep 864000}
	iw dev $NIC set freq $FREQ		# || { echo "EZ-WifiBroadcast: Init_NIC: Set freq $FREQ MHz on $NIC failed!" && sleep 864000}
	CHANBW_PATH=$(find /sys/kernel/debug/ieee80211 -name chanbw |grep $PHY_NAME)
	if [ -f $CHANBW_PATH ]; then
		echo "EZ-WifiBroadcast: Init_NIC: $NIC maybe supports 5MHz/10MHz bandwidth."
		echo $CHANBW > $CHANBW_PATH 
	else
		echo "EZ-WifiBroadcast: Init_NIC: $NIC on 5MHz/10MHz bandwidth is not supported. Use default instead."
	fi
}

start_service() {

	if [ $(uci get wbc.wbc.enable) -eq 0 ]; then 
		exit
	fi
	
	# 0. Init Wi-Fi card here
	echo "EZ-WifiBroadcast: Init Wi-Fi Card..."
	init_nic
	echo "EZ-WifiBroadcast: TX measure..."
	echo $(measure) > /tmp/bitrate_measured_kbit
	echo "EZ-WifiBroadcast: TX measure finished, $(cat /tmp/bitrate_measured_kbit)"
	# To-do: Find out what these things mean and how to bypass
	echo 5000 > /tmp/bitrate_kbit
	echo "0" > /tmp/cts
	echo "0" > /tmp/undervolt 	# a wireless router should never...
	mkdir -p /var/run/wbc
	
	/usr/sbin/sharedmem_init_tx
	/usr/sbin/sharedmem_init_rx
	
	# 1. Video TX/RX Instance
	if [ $(uci get wbc.video.enable) -eq 1 ]; then
		echo "EZ-WifiBroadcast: Video Transfer Enabled."
		if [ "$(uci get wbc.video.mode)" = "tx" ]; then
			# TX: Listen UDP on listen_port -> air
			procd_open_instance "wbc_tx_rawsock"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command nc -ulp $(uci get wbc.video.listen_port)|/usr/sbin/tx_rawsock -p $(uci get wbc.video.port) -b $(uci get wbc.video.datanum) -r $(uci get wbc.video.fecnum) -f $(uci get wbc.video.packetsize) -t $(uci get wbc.video.frametype) -d $(uci get wbc.video.bitrate) -y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_rawsock.pid	
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Video TX Mode, Starting tx_rawsock..."
		fi
		if [ "$(uci get wbc.video.mode)" = "rx" ]; then
			# RX: Video stream received from air -> send_ip:send_port (UDP)
			procd_open_instance "wbc_rx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command  /usr/sbin/rx \
				-p $(uci get wbc.video.wbc_port) \
				-b $(uci get wbc.video.datanum) \
				-r $(uci get wbc.video.fecnum) \
				-f $(uci get wbc.video.blocksize) \
				-t $(uci get wbc.video.frametype) \
				-d $(uci get wbc.video.rxbuf) \
				   $(uci get wbc.nic.iface) |\
				nc -u $(uci get wbc.video.send_ip_port|cut -d ':' -f 1) \
					$(uci get wbc.video.send_ip_port|cut -d ':' -f 2) 
			procd_set_param pidfile /var/run/wbc/rx.pid	
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Video RX Mode, Starting rx..."
		fi
	fi
	
	# 2. OSD RX Instance (Telemetry) (Maybe have bugs)
	if [ $(uci get wbc.telemetry.enable) -eq 1 ]; then
		echo "EZ-WifiBroadcast: Telemetry Enabled."
		# RX Telemetry received from air -> send_ip:send_port (UDP)
		if [ "$(uci get wbc.telemetry.mode)" = "rx" ]; then
			stty -F $(uci get wbc.telemetry.uart) $STTY_ARGS $(uci get wbc.telemetry.baud)  
			procd_open_instance "wbc_rx_rc_telemetry_buf"
			procd_set_param stdout 1
			procd_set_param stderr 1
			# rx_rc_telemetry_buf does not support rc so using /dev/null now
			procd_set_param command /usr/sbin/rx_rc_telemetry_buf \
				-p $(uci get wbc.telemetry.port) \
				-b 19200 -s /dev/null -o 1 -r 0\
				 $(uci get wbc.nic.iface) |\
				 nc -u $(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 1) \
					$(uci get wbc.telemetry.send_ip_port|cut -d ':' -f 2) 
			procd_set_param pidfile /var/run/wbc/rx_rc_telemetry_buf.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Telemetry RX Mode, Starting Telemetry..."
			echo "EZ-WifiBroadcast: Telemetry redirect to $(wbc.telemetry.send_ip_port)."
		fi
		# wbc.telemetry.uart -> air
		if [ "$(uci get wbc.telemetry.mode)" = "tx" ]; then
			stty -F $(uci get wbc.telemetry.uart) $STTY_ARGS $(uci get wbc.telemetry.baud)  
			procd_open_instance "wbc_tx_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/tx_telemetry \
				-p $(uci get wbc.telemetry.port) \
				-c $(uci get wbc.telemetry.cts) \
				-r $(uci get wbc.telemetry.retrans) \
				-x $(uci get wbc.telemetry.proto) \
				-d $(uci get wbc.telemetry.bitrate) \
				-y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_telemetry.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Telemetry TX Mode, Starting Telemetry..."
			echo "EZ-WifiBroadcast: Telemetry Enabled on $(uci get wbc.telemetry.uart)."
		fi
	fi
	
	# 3. Uplink RX Instance
	if [ $(uci get wbc.uplink.uplink_enable) -eq 1 ]; then
		echo "EZ-WifiBroadcast: Uplink Enabled."
		# air -> wbc.uplink.uart 
		if [ "$(uci get wbc.uplink.mode)" = "rx" ]; then
			procd_open_instance "wbc_rx_rc_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rx_rc_telemetry \
				-p $(uci get wbc.uplink.port) \
				-r 99 \
				-b $(uci get wbc.uplink.baud) \
				-o 0 \
				-s $(uci get wbc.uplink.uart) \
				$(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rx_rc_telemetry.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Uplink RX Mode, Starting rx_rc_telemetry..."
			echo "EZ-WifiBroadcast: Uplink Output Enabled on $(uci get wbc.uplink.uart)."
		fi

		# Listen on UDP port -> air
		if [ "$(uci get wbc.uplink.mode)" = "tx" ]; then
			procd_open_instance "wbc_uplink_tx_telemetry"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command nc -ulp $(uci get wbc.uplink.listen_port)|\
				/usr/sbin/tx_telemetry \
				-p $(uci get wbc.uplink.port) \
				-c $(uci get wbc.uplink.cts) \
				-r $(uci get wbc.uplink.retrans) \
				-x $(uci get wbc.uplink.proto) \
				-d $(uci get wbc.uplink.bitrate) \
				-y 0 $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/tx_telemetry_uplink.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: Uplink TX Mode, Starting tx_telemetry..."
			echo "EZ-WifiBroadcast: Uplink TX Data Input From localhost:$(uci get wbc.uplink.listen_port)."
		fi
	fi
	
	# 4. RSSI TX/RX Instance
	if [ $(uci get wbc.rssi.enable) -eq 1 ]; then
		echo "EZ-WifiBroadcast: RSSI Enabled."
		# RSSI TX Instance
		if [ "$(uci get wbc.rssi.mode)" = "tx" ]; then
			procd_open_instance "wbc_rssitx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rssitx
			procd_append_param command $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rssitx.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: RSSI TX Mode, Starting rssitx..."
		fi
		# RSSI RX Instance
		if [ "$(uci get wbc.rssi.mode)" = "rx" ]; then
			procd_open_instance "wbc_rssirx"
			procd_set_param stdout 1
			procd_set_param stderr 1
			procd_set_param command /usr/sbin/rssirx
			procd_append_param command $(uci get wbc.nic.iface)
			procd_set_param pidfile /var/run/wbc/rssirx.pid
			procd_set_param respawn ${respawn_threshold:-86400} ${respawn_timeout:-1} ${respawn_retry:-100}
			procd_close_instance
			echo "EZ-WifiBroadcast: RSSI RX Mode, Starting rssirx..."
		fi
	fi
}

reload_service() {
	restart
}

service_triggers() {
	procd_add_reload_trigger "wbc"
}
