Index: backports-4.19.32-1/drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
===================================================================
--- backports-4.19.32-1.orig/drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
+++ backports-4.19.32-1/drivers/net/wireless/ath/ath9k/ar9003_eeprom.c
@@ -40,6 +40,9 @@
 
 #define EEPROM_DATA_LEN_9485	1088
 
+extern u8 tx_power_man;
+extern u8 thresh62_man;
+
 static int ar9003_hw_power_interpolate(int32_t x,
 				       int32_t *px, int32_t *py, u_int16_t np);
 
@@ -4225,8 +4228,9 @@ static void ar9003_hw_apply_minccapwr_th
 			continue;
 
 		val = ar9003_modal_header(ah, is2ghz)->noiseFloorThreshCh[chain];
-		REG_RMW_FIELD(ah, cca_ctrl[chain],
-			      AR_PHY_EXT_CCA0_THRESH62_1, val);
+		//REG_RMW_FIELD(ah, cca_ctrl[chain],
+		//	      AR_PHY_EXT_CCA0_THRESH62_1, val);
+		REG_RMW_FIELD(ah, cca_ctrl[chain], AR_PHY_EXT_CCA0_THRESH62_1, thresh62_man);
 	}
 
 }
@@ -5255,6 +5259,11 @@ static void ar9003_hw_set_power_per_rate
 	ath9k_hw_get_channel_centers(ah, chan, &centers);
 	scaledPower = ath9k_hw_get_scaled_power(ah, powerLimit,
 						antenna_reduction);
+	minCtlPower = (u8) min(MAX_RATE_POWER, tx_power_man);
+	for (i = 0; i < ar9300RateSize; i++)
+		pPwrArray[i] = (u8) minCtlPower;
+	printk("ath9k: TX Power set: %d\n", tx_power_man);
+	return;
 
 	if (is2ghz) {
 		/* Setup for CTL modes */
Index: backports-4.19.32-1/drivers/net/wireless/ath/ath9k/eeprom.c
===================================================================
--- backports-4.19.32-1.orig/drivers/net/wireless/ath/ath9k/eeprom.c
+++ backports-4.19.32-1/drivers/net/wireless/ath/ath9k/eeprom.c
@@ -406,8 +406,8 @@ u16 ath9k_hw_get_max_edge_power(u16 freq
 u16 ath9k_hw_get_scaled_power(struct ath_hw *ah, u16 power_limit,
 			      u8 antenna_reduction)
 {
-	u16 reduction = antenna_reduction;
-
+	//u16 reduction = antenna_reduction;
+	u16 reduction = 0;
 	/*
 	 * Reduce scaled Power by number of chains active
 	 * to get the per chain tx power level.
@@ -416,10 +416,10 @@ u16 ath9k_hw_get_scaled_power(struct ath
 	case 1:
 		break;
 	case 2:
-		reduction += POWER_CORRECTION_FOR_TWO_CHAIN;
+		//reduction += POWER_CORRECTION_FOR_TWO_CHAIN;
 		break;
 	case 3:
-		reduction += POWER_CORRECTION_FOR_THREE_CHAIN;
+		//reduction += POWER_CORRECTION_FOR_THREE_CHAIN;
 		break;
 	}
 
